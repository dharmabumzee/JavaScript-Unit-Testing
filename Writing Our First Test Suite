// ship_test.js

const expect = require('chai').expect;

describe('checkForShip', function () {
  let checkForShip = require('../game_logic/ship_methods').checkForShip;
  let player;
  
  before(function () {
    player = {
            ships: [
        {
          locations: [[0, 0], [0, 1]]
        },
        {
          locations: [[1, 0], [1, 1]]
        },
        {
          locations: [[2, 0], [2, 1], [2, 2], [2, 3]]
        }
      ]
    };
  });
 
 
  it('should correctly report no ship at a given player's coordinates', function() {
  
    expect(checkForShip(player, [9, 9])).to.be.false;
  });
  
  

  it('should correctly report a ship located at a given coordinates', function() {
  
    expect(checkForShip(player, [0, 0])).to.deep.equal(player.ships[0]);
  });
  
  
  
  it('should handle ships located at more than one coordinate', function() {
  
    expect(checkForShip(player, [0, 0])).to.deep.equal(player.ships[0]);
    expect(checkForShip(player, [0, 1])).to.deep.equal(player.ships[0]);
    expect(checkForShip(player, [9, 9])).to.be.false;
  });
  
  it('should handle checking multiple ships', function() {
  
    expect(checkForShip(player, [0, 0])).to.deep.equal(player.ships[0]);
    expect(checkForShip(player, [0, 1])).to.deep.equal(player.ships[0]);
    expect(checkForShip(player, [1, 0])).to.deep.equal(player.ships[1]);
    expect(checkForShip(player, [1, 1])).to.deep.equal(player.ships[1]);
    expect(checkForShip(player, [2, 3])).to.deep.equal(player.ships[2]);
    expect(checkForShip(player, [9, 9])).to.be.false;
  });
  
});


describe('damageShip', function () {
  let damageShip = require('../game_logic/ship_methods').damageShip;
  
  it('should register damage on a given ship at a given location', function () {
    let ship = {
      locations: [[0,0]],
      damage: []
    };
    
    damageShip('ship', [0, 0]};
    
    expect(ship.damage).to.not.be.empty;
    expect(ship.damage[0]).to.deep.equal([0, 0]);
  });
});


describe('fire', function() {
  let fire = require('../game_logic/ship_methods').fire;
  let player;
  
  beforeEach(function () {
    player = {
      ships = [
        {
          locations: [[0, 0]],
          damage: []
        }
      ]
    };
  });
  
  after(function () {
    console.log('entire test suite completed');
  });
  
  afterEach(function () {
    console.log('one unit test completed');
  });
  
  it('should record damage on the given player's ship at a given coordinate', function() {
   
    fire(player, [0, 0]);
    
    expect(player.ships[0].damage[0]).to.deep.equal([0, 0]);
    
  });
  
  it('should NOT record damage if there is no ship at my coordinates', function() {
    
    fire(player, [9, 9]);
    
    expect(player.ships[0].damage).to.be.empty;
    
  });
});



// game_logic/ship_methods.js

function checkForShip (player, coordinates) {
  let shipPresent, ship; 
  
  for (let i = 0; i < player.ships.length; i++) {
    ship = player.ships[i];
    
    shipPresent = ship.locations.filter(function (actualCoordinate) {
      return (actualCoordinate[0] === coordinates[0)] && (actualCoordinate[1] === coordinates[1]);
    })[0];
    
    if (shipPresent) {
      return ship;
    } 
  }
  
  return false;
}

function damageShip(ship, coordinates) {
  ship.damage.push(coordinates);
}

function fire(player, coordinates) {
  let ship = checkForShip(player, coordinates);
  
  if(ship) {
    damageShip(ship, coordinates);
  }
}

module.exports.checkForShip = checkForShip;
module.exports.damageShip = damageShip;
module.exports.fire = fire;



// player_test.js

const expect = require('chai').expect;

describe('PLAYER METHODS', function () {
  describe('validateLocation', function () {
    let validateLocation = require('../game_logic/player_methods.js').validateLocation;
    let player;

    beforeEach(function () {
      player = {
        ships: [
          {
            locations: [[9, 9]]
          }
        ]
      };
    });

    it('shoud confirm valid for unoccupied locations in range', function () {
      let location = [0, 0];
      let actual = validateLocation(player, location);

      expect(actual).to.be.ok;
    });

    it('shoud confirm INvalid for occupied locations in range', function () {
      let location = [9, 9];
      let actual = validateLocation(player, location);

      expect(actual).to.be.false;
    });

    it('shoud confirm INvalid for UNoccupied locations OUT of range', function () {
      let locationHigh = [10, 10];
      let locationLow = [-1, -1];

      expect(validateLocation(player, locationHigh)).to.be.false;
      expect(validateLocation(player, locationLow)).to.be.false;
    });
  });

  describe('validateLocations', function () {
    let validateLocations = require('../game_logic/player_methods.js').validateLocations;
    let player;

    beforeEach(function () {
      player = {
        ships: [
          {
            locations: [[0, 0]]
          }
        ]
      };
    });

    it('should correctly report a list of unoccupied locations is valid', function () {
      let locations = [[1, 1], [1, 2], [1, 3], [1, 4]];
      expect(validateLocations(player, locations)).to.be.ok;
    });

    it('should correctly report a a problem if any location in the list is invalid', function () {
      let locations = [[1, 1], [1, 2], [1, 3], [10, 10]];
      expect(validateLocations(player, locations)).to.be.false;

      locations = [[1, 1], [1, 2], [1, 3], [0, 0]];
      expect(validateLocations(player, locations)).to.be.false;
    });
  });

  describe('placeShip', function () {
    let placeShip = require('../game_logic/player_methods.js').placeShip;
    let player;

    beforeEach(function () {
      player = {
        ships: [
          {
            size: 1,
            locations: []
          },
          {
            size: 2,
            locations: [[1, 0], [1, 1]]
          }
        ]
      };
    });

    it('should update a ship with a valid starting location', function () {
      let ship = player.ships[0];
      let coordinates = [0, 1];

      placeShip(player, ship, coordinates, 'horizontal');
      let actual = ship.locations;

      expect(actual).to.be.ok;
      expect(actual).to.have.length(1);
      expect(actual[0]).to.deep.equal([0, 1]);
    });
    
    it('should throw an error if no direction is specified, function () {
      let ship = player.ships[0];
      let coordinates = [0, 1];
      
      let handler = function () {
        placeShip(player, ship, coordinates);
      });
      expect(handler).to.throw(Error);
      expect(handler).to.throw('You left out the direction! I need that for math!');
      
    }); 
  });
});

// test suite for computer player

describe('COMPUTER PLAYER', function () {
  describe('computerFire', function () {
    let computerFire = require('../game_logic/player_methods').computerFire;
    let player;
    
    beforeEach(function () {
      player = {
        ships: [
          {
            locations: [[9, 9]]
          }
        ]
      };
    });
    
    it('should aim at a random location', function () {
      let ship = player.ships[0];
      
      computerFire();

    });
  });
});




// player_methods.js

const checkForShip = require('./ship_methods.js').checkForShip;

function validateLocation (player, coordinates) {
  let x = coordinates[0];
  let y = coordinates[1];

  let spaceAvailable = !checkForShip(player, coordinates);

  if ((x <= 9 && x >= 0) && (y <= 9 && y >= 0)) {
    return spaceAvailable; // decides whether this valid space is occupied
  } else {
    return false;
  }
}

function validateLocations (player, locations) {
  let validated = locations.map(function (location) {
    return validateLocation(player, location);
  });
  return validated.indexOf(false) === -1;
}

function placeShip (player, ship, startingCoordinates, direction) {
  
  if (!direction) throw Error('You left out the direction! I need that for math!');
  
  let proposedLocations = [];
  let previousLocation,
    rowNumber,
    columnNumber;

  for (let i = 0; i < ship.size; i++) {
    previousLocation = proposedLocations[i - 1] || [];
    rowNumber = previousLocation[0];
    columnNumber = previousLocation[1];
    
    proposedLocations[i] = (i === 0)
      ? startingCoordinates
      : (direction === 'horizontal')
        ? [rowNumber, ++columnNumber]
        : [++rowNumber, columnNumber];
  }
  
  if (validateLocations(player, proposedLocations)) {
    ship.locations = proposedLocations;
  } else {
    return false;
  }
}

function getRandomCoordinates() {
  let x = Math.floor(Math.random() * 9);
  let y = Math.floor(Math.random() * 9);
  return [x, y];
});

function getRandomDirection() {
  return Math.random() > 0.5
   ? 'horizontal'
   : 'vertical';
});



// fire(player, getRandomCoordinates());
// placeShip(computerPlayer, computerPlayerShip[0], getRandomCoordinates(), getRandomDirection());


module.exports = {
  placeShip: placeShip,
  validateLocations: validateLocations,
  validateLocation: validateLocation
};


// game_test.js

const expect = require('chai').expect;

describe('GAME INSTANCE FUNCTION', function () {
  describe('checkGameStatus', function () {
    let checkGameStatus = require('../game_logic/game_instance.js').checkGameStatus;
    it('should tell me when the game is over', function() {
      let players = [
        {
					ships: [
						{
							locations: [[0, 0]],
							damage: [[0, 0]]
						}
					]
        }
      ];
      let actual = checkGameStatus(players);
      expect(actual).to.be.false;
    });
  });
}):
